// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?

  accounts       Account[]
  sessions       Session[]

  memberships    WorkspaceMember[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  type               String
  access_token       String?  @map("accessToken")
  expires_at         Int?     @map("expiresAt")
  refresh_token      String?  @map("refreshToken")
  refresh_token_expires_in Int?
  scope              String?
  token_type         String?
  id_token           String?  @map("idToken")
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WorkSpace {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  // relations
  members   WorkspaceMember[]
  boards    Board[]
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        Role     @default(MEMBER)

  user      User      @relation(fields: [userId], references: [id])
  workspace WorkSpace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])  // stops duplicate memberships
}

enum Role {
  OWNER
  MEMBER
  VIEWER
}

model Board {
  id          String    @id @default(cuid())
  title       String
  workspace   WorkSpace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  Column      Column[]
}

model Column {
  id      String @id @default(cuid())
  title   String
  order   Int
  board   Board  @relation(fields: [boardId], references: [id])
  boardId String
  Card    Card[]
}

model Card {
  id       String @id @default(cuid())
  title    String
  order    Int
  column   Column @relation(fields: [columnId], references: [id])
  columnId String
}
